// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one

INSERT INTO users (
  id,
  created_at,
  updated_at,
  fullName,
  username,
  email,
  password,
  role,
  disabled
)

VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8,
  $9
)

RETURNING (
  id,
  created_at,
  updated_at,
  fullName,
  username,
  email,
  role,
  disabled
)
`

type CreateUserParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Fullname  string
	Username  string
	Email     string
	Password  string
	Role      string
	Disabled  bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Fullname,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Role,
		arg.Disabled,
	)
	var column_1 interface{}
	err := row.Scan(&column_1)
	return column_1, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
  id,
  created_at,
  updated_at,
  fullName,
  username,
  email,
  password,
  role,
  disabled
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Fullname,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.Disabled,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT
  id,
  created_at,
  updated_at,
  fullName,
  username,
  email,
  password,
  role,
  disabled
FROM users
WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Fullname,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.Disabled,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT
  id,
  created_at,
  updated_at,
  fullName,
  username,
  email,
  password,
  role,
  disabled
FROM users
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Fullname,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.Disabled,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  updated_at = $2,
  fullName = $3,
  username = $4
WHERE id = $1

RETURNING (
  id,
  created_at,
  updated_at,
  fullName,
  username,
  email,
  role,
  disabled
)
`

type UpdateUserParams struct {
	ID        uuid.UUID
	UpdatedAt time.Time
	Fullname  string
	Username  string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.UpdatedAt,
		arg.Fullname,
		arg.Username,
	)
	var column_1 interface{}
	err := row.Scan(&column_1)
	return column_1, err
}

const updateUserAvailability = `-- name: UpdateUserAvailability :one

UPDATE users
SET
  updated_at = $2,
  disabled = $3
WHERE id = $1

RETURNING (
  id,
  created_at,
  updated_at,
  fullName,
  username,
  email,
  role,
  disabled
)
`

type UpdateUserAvailabilityParams struct {
	ID        uuid.UUID
	UpdatedAt time.Time
	Disabled  bool
}

func (q *Queries) UpdateUserAvailability(ctx context.Context, arg UpdateUserAvailabilityParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, updateUserAvailability, arg.ID, arg.UpdatedAt, arg.Disabled)
	var column_1 interface{}
	err := row.Scan(&column_1)
	return column_1, err
}

const updateUserEmail = `-- name: UpdateUserEmail :one

UPDATE users
SET
  updated_at = $2,
  email = $3
WHERE id = $1

RETURNING (
  id,
  created_at,
  updated_at,
  fullName,
  username,
  email,
  role,
  disabled
)
`

type UpdateUserEmailParams struct {
	ID        uuid.UUID
	UpdatedAt time.Time
	Email     string
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, updateUserEmail, arg.ID, arg.UpdatedAt, arg.Email)
	var column_1 interface{}
	err := row.Scan(&column_1)
	return column_1, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one

UPDATE users
SET
  updated_at = $2,
  password = $3
WHERE id = $1

RETURNING (
  id,
  created_at,
  updated_at,
  fullName,
  username,
  email,
  role,
  disabled
)
`

type UpdateUserPasswordParams struct {
	ID        uuid.UUID
	UpdatedAt time.Time
	Password  string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, updateUserPassword, arg.ID, arg.UpdatedAt, arg.Password)
	var column_1 interface{}
	err := row.Scan(&column_1)
	return column_1, err
}
