// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: products.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const batchAddProducts = `-- name: BatchAddProducts :many
INSERT INTO products (
  id,
  title,
  price,
  description,
  category,
  image,
  rate,
  count
)
VALUES
  (UNNEST($1::UUID[]), UNNEST($2::TEXT[]), UNNEST($3::INT[]), UNNEST($4::TEXT[]), UNNEST($5::TEXT[]), UNNEST($6::TEXT[]), UNNEST($7::INT[]), UNNEST($8::INT[]))
RETURNING (
  id,
  title,
  price,
  description,
  category,
  image,
  rate,
  count
)
`

type BatchAddProductsParams struct {
	Column1 []uuid.UUID
	Column2 []string
	Column3 []int32
	Column4 []string
	Column5 []string
	Column6 []string
	Column7 []int32
	Column8 []int32
}

func (q *Queries) BatchAddProducts(ctx context.Context, arg BatchAddProductsParams) ([]interface{}, error) {
	rows, err := q.db.QueryContext(ctx, batchAddProducts,
		pq.Array(arg.Column1),
		pq.Array(arg.Column2),
		pq.Array(arg.Column3),
		pq.Array(arg.Column4),
		pq.Array(arg.Column5),
		pq.Array(arg.Column6),
		pq.Array(arg.Column7),
		pq.Array(arg.Column8),
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var column_1 interface{}
		if err := rows.Scan(&column_1); err != nil {
			return nil, err
		}
		items = append(items, column_1)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createProduct = `-- name: CreateProduct :one

INSERT INTO products (
  id,
  title,
  price,
  description,
  category,
  image,
  rate,
  count
)

VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8
)

RETURNING (
  id,
  title,
  price,
  description,
  category,
  image,
  rate,
  count
)
`

type CreateProductParams struct {
	ID          uuid.UUID
	Title       string
	Price       int32
	Description string
	Category    string
	Image       string
	Rate        int32
	Count       int32
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.ID,
		arg.Title,
		arg.Price,
		arg.Description,
		arg.Category,
		arg.Image,
		arg.Rate,
		arg.Count,
	)
	var column_1 interface{}
	err := row.Scan(&column_1)
	return column_1, err
}

const getProductById = `-- name: GetProductById :one
SELECT
  id,
  title,
  price,
  description,
  category,
  image,
  rate,
  count
FROM products
WHERE id = $1
`

func (q *Queries) GetProductById(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductById, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Price,
		&i.Description,
		&i.Category,
		&i.Image,
		&i.Rate,
		&i.Count,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT
  id,
  title,
  price,
  description,
  category,
  image,
  rate,
  count
FROM products
ORDER BY id
LIMIT $1
`

func (q *Queries) GetProducts(ctx context.Context, limit int32) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProducts, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Price,
			&i.Description,
			&i.Category,
			&i.Image,
			&i.Rate,
			&i.Count,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
