// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: shopping_list.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createShoppingList = `-- name: CreateShoppingList :one

INSERT INTO user_shopping_list (
  id,
  user_id,
  product_id,
  date_added
)

VALUES (
  $1,
  $2,
  $3,
  $4
)

RETURNING (
  id,
  user_id,
  product_id,
  date_added
)
`

type CreateShoppingListParams struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	ProductID uuid.UUID
	DateAdded time.Time
}

func (q *Queries) CreateShoppingList(ctx context.Context, arg CreateShoppingListParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, createShoppingList,
		arg.ID,
		arg.UserID,
		arg.ProductID,
		arg.DateAdded,
	)
	var column_1 interface{}
	err := row.Scan(&column_1)
	return column_1, err
}

const getShoppingListByUserId = `-- name: GetShoppingListByUserId :many
SELECT
  id,
  user_id,
  product_id,
  date_added
FROM user_shopping_list
WHERE user_id = $1
ORDER BY id
`

func (q *Queries) GetShoppingListByUserId(ctx context.Context, userID uuid.UUID) ([]UserShoppingList, error) {
	rows, err := q.db.QueryContext(ctx, getShoppingListByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserShoppingList
	for rows.Next() {
		var i UserShoppingList
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProductID,
			&i.DateAdded,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
